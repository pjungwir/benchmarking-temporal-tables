#!/bin/bash
# run - run a benchmark, after creating a new database from the template

set -eu

benchdir="$HOME/src/fk-bench"
. $benchdir/lib.sh

function usage() {
  echo "USAGE: run [options] <config_file>"
  echo "  -C             Don't run createdb"
  echo "  -t <filename>  Trace with <filename> and ^C it when we're done"

  exit 1
}

needs_createdb=true
trace_command=""

while getopts 'Ct:' opt; do
  case "$opt" in
    "C")
      needs_createdb=false
      ;;
    "t")
      trace_command="${OPTARG}"
      ;;
    *)
      usage
      ;;
  esac
done
shift "$(($OPTIND -1))"

config="${1:-}"
if [ -z "$config" ]; then
  usage
fi

# infer the impl from the beginning of the config file name:
impl=""
case "$config" in
  range_agg*)
    impl=range_agg
    ;;
  lag*)
    impl=lag
    ;;
  exists*)
    impl=exists
    ;;
  *)
    # Might be okay if we don't need to run createdb,
    # e.g. for quick test runs to work out bugs.
    ;;
esac

password=""
if [ ! -z "$trace_command" ]; then
  # Collect the password so we can use it again below:
  # Do this right away, before we run createdb, because that takes a while.
  echo -n "Sudo password: "
  read -s password
  echo
fi

# create a benchmark database
if [ "$needs_createdb" = true ]; then
  if [ -z "$impl" ]; then
    echo "No impl inferred"
    usage
  fi
  use_impl "${impl}"
  dropdb --force --if-exists -p $port benchbase
  createdb -p $port -T benchbase_template benchbase
  psql --no-psqlrc -p $port -c "vacuum analyze" benchbase
fi

# Run a trace in the background and ^C it later.
# This could be a bpftrace command, etc.
# If you want more than one, just wrap them all in a script. (Does bash getopts support giving the same option many times?)
trace_result=""
if [ ! -z "$trace_command" ]; then
  mkdir -p tmp
  trace_result="$benchdir/tmp/$(date +"%Y%m%d_%H:%M:%S")-trace.txt"
  # It's too bad we need full sudo here.
  # This should be enough (either here or before you run run):
  # sudo capsh --caps="cap_bpf+eip cap_setpcap,cap_setuid,cap_setgid+ep" --keep=1 --user=paul --addamb=cap_bpf -- -c 'bpftrace exec-nodes.bt'
  # (adapted from https://unix.stackexchange.com/a/303738/25948)
  # But bpftrace seems to have an internal check for uid 0 and refuses to run.
  # Also we need --background or the whole terminal gets messed up.
  # See https://askubuntu.com/questions/1459049/bash-script-launching-background-process-breaks-terminal-output-and-kills-backgr
  printf "%s\n" "$password" | sudo --background --non-interactive --stdin $trace_command > "$trace_result"
fi

cd ~/src/benchbase
./mvnw compile exec:java -P postgres -Dexec.args="-b temporal -c $benchdir/$config --create=false --load=false --execute=true --monitor-type=advanced --interval-monitor=1000"
# Copy the results somewhere safe:
result_filename="$(ls -t ~/src/benchbase/results/*.config.xml | head -1)"
result_base="$(basename $result_filename .config.xml)"
cp "${result_filename%%config.xml}"* $benchdir/results/

if [ ! -z "$trace_result" ]; then
  # Send a ^C to child processes:
  echo "Killing children (τί μέλλομεν τὰ δεινὰ κἀναγκαῖα μὴ πράσσειν κακά;)"
  # It would be a lot safer to scope this to just our own children,
  # but I'm not sure that's possible after `sudo --background` above,
  # which sets the parent pid of sudo itself to 1.
  # In our retracing search after our missing children, we find only another orphan.
  #
  # We need ^ in the pattern because if we SIGINT sudo itself,
  # it will terminate its children before bpftrace has a chance to write out its histogram.
  printf "%s\n" "$password" | sudo --non-interactive --stdin pkill -INT -f "^$trace_command"

  # Copy the histogram.
  # 
  # If we copy too early we wind up with no histogram,
  # so this has to happen after bpftrace has exited.
  #
  # Calling `wait` here does nothing now that we're using `sudo -b` above.
  # I guess we should use pgrep to get the pids, kill them, and loop until they disappear. :-(
  # For now we could just take a little nap.
  sleep 5
  cp $trace_result "${benchdir}/results/${result_base}-trace.txt"
fi
echo "Saved everything to ${benchdir}/results/${result_base}*"
